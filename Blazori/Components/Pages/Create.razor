@rendermode InteractiveServer
@page "/create"
<PageTitle>Calendar</PageTitle>
@*Tässä on jonkinlaine kalenteri mitä voi muokkaa tarpeen mukaan. siinä ei kans ne napit toimi jostai syystä. *@


<button @onclick="() => CreateMonth(-1)">Previous Month</button>
<h1>@monthName, @year</h1>
<button @onclick="() => CreateMonth(1)">Next Month</button>

<!-- Viikonpäivien otsikot -->
<section style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 10px; font-weight: bold; text-align: center;">
	<div>Mon</div>
	<div>Tue</div>
	<div>Wed</div>
	<div>Thu</div>
	<div>Fri</div>
	<div>Sat</div>
	<div>Sun</div>
</section>

<section>
	@for (int i = 0; i < numDummyColumn; i++)
	{
		<div></div>
	}

	@for (int i = 1; i <= monthEnd.Day; i++)
	{
		var date = new DateTime(year, month, i);
		var calendarItems = items.Where(n => n.Date.Date == date.Date).ToList();

		<div style="border: 1px solid black; padding: 5px; cursor: pointer;" @onclick="() => SelectDate(date)">
			<h3>@i</h3>

			@if (calendarItems.Any())
			{
				@foreach (var evt in calendarItems)
				{
					<div style="font-size: 0.9em; margin-bottom: 3px;">
						@evt.Name
						<button style="margin-left: 5px; font-size: 0.7em;" @onclick="() => DeleteEvent(evt)">x</button>
					</div>
				}
			}
		</div>
	}
</section>

@if (selectedDate != null)
{
	<div style="margin-top: 20px; border: 1px solid #ccc; padding: 10px;">
		<h3>Add Entry for @selectedDate?.ToString("dd.MM.yyyy")</h3>

		<div style="margin-bottom:10px;">
			<label>Event name:</label><br />
			<input placeholder="Event name" @bind="newEventName" />
			<button @onclick="AddEvent">Add Event</button>
		</div>

		<div style="margin-bottom:10px;">
			<label>Sleep hours:</label><br />
			<input placeholder="e.g. 7.5" @bind="newSleepHours" />
			<button @onclick="AddSleep">Add Sleep</button>
		</div>

		<button @onclick="CancelAdd">Cancel</button>
	</div>
}

@code {


	//DATA SAVING LOGIC

	public bool hasSaved = false;

	private void Remove()
	{

	}

	public bool saveFailed;
	public string? bio = "";
	public float sleep = 0;
	public List<string> bios = new List<string>();
	

	public string AddEntry(string bio)
	{


		try
		{
			if (!hasSaved)
			{
				string[] existingData = SaveLoad.StorageLoading.Load(Sign_in.loggedUser);

				string storageDataJsonOld = string.Join("||", existingData);

				bios.Add(storageDataJsonOld);

			}

			string currentTime = (selectedDate.Value.Day + "/" + selectedDate.Value.Month + "/" + selectedDate.Value.Year);
			bios.Add(currentTime);
			bios.Add(bio);
			string bioString = "";

			for (int i = 0; i < bios.Count; i++)
			{
				bioString += bios[i] + "||";
			}

			return bioString;
		}
		catch
		{
			return bio;
		}

	}

	private void SaveEntry()
	{
		try
		{
			bio = AddEntry(bio);
			SaveLoad.StorageSaving.Save(Sign_in.loggedUser, bio);
			hasSaved = true;
			saveFailed = false;

		}
		catch
		{
			saveFailed = true;
		}
	}

	public string PrintBio()
	{

		string[] pulledbios = SaveLoad.StorageLoading.Load(Sign_in.loggedUser);

		return string.Join("<br>", pulledbios);

	}



	//CALENDAR LOGIC

	string monthName = "";
	DateTime monthEnd;
	int monthsAway = 0;
	int numDummyColumn = 0;
	int year = 2020;
	int month = 0;
	List<CalendarItem> items = new List<CalendarItem>();
	string[] existingData = SaveLoad.StorageLoading.Load(Sign_in.loggedUser);
	DateTime? selectedDate = null;
	string newEventName = "";

	protected override void OnInitialized()
	{
		int datalength = existingData.Length;
		for (int i = 0; i <= datalength; i++)
		{
			
			try
			{
				string date = existingData[i];

				// Split the string at the '/' characters
				string[] parts = date.Split('/');

				// Assign each part to a variable
				string day = parts[0];
				string month = parts[1];
				string year = parts[2];

				// Optional: convert them to integers
				int dayNum = int.Parse(day);
				int monthNum = int.Parse(month);
				int yearNum = int.Parse(year);



				string note = existingData[i++ + 1];
				items.Add(new CalendarItem(new DateTime(yearNum, monthNum, dayNum), note));
			} 
			catch
			{
				break;
			}
			
		}

		
		CreateMonth(0);
	}

	void CreateMonth(int masway)
	{
		monthsAway += masway;
		var tempDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(monthsAway);
		month = tempDate.Month;
		year = tempDate.Year;

		DateTime monthStart = new DateTime(year, month, 1);
		monthEnd = monthStart.AddMonths(1).AddDays(-1);
		int dayOfWeek = (int)monthStart.DayOfWeek;
		numDummyColumn = dayOfWeek;
		monthName = monthStart.Month switch
		{
			1 => "January",
			2 => "February",
			3 => "March",
			4 => "April",
			5 => "May",
			6 => "June",
			7 => "July",
			8 => "August",
			9 => "September",
			10 => "October",
			11 => "November",
			12 => "December",
			_ => ""
		};
		numDummyColumn = ((int)monthStart.DayOfWeek == 0) ? 6 : dayOfWeek - 1;
	}
	void SelectDate(DateTime date)
	{
		selectedDate = date;
		newEventName = "";
	}

	//tapahtumien lisääminen
	void AddEvent()
	{
		if (!string.IsNullOrWhiteSpace(newEventName) && selectedDate.HasValue)
		{
			items.Add(new CalendarItem(selectedDate.Value, newEventName));
			bio = newEventName;
			SaveEntry();
		}

		newEventName = "";
		selectedDate = null;
	}

	void CancelAdd()
	{
		selectedDate = null;
		newEventName = "";
	}
	void DeleteEvent(CalendarItem evt)
	{
		// Remove from list
		items.Remove(evt);

		// Rebuild save string with all remaining events
		List<string> saveList = new List<string>();
		foreach (var item in items)
		{
			string dateString = $"{item.Date.Day}/{item.Date.Month}/{item.Date.Year}";
			saveList.Add(dateString);
			saveList.Add(item.Name);
		}

		// Combine with || separator and save
		string finalData = string.Join("||", saveList);
		SaveLoad.StorageSaving.Save(Sign_in.loggedUser, finalData);

		// Optional visual update
		StateHasChanged();
	}
	string newSleepHours = "";
	void AddSleep()
	{
		if (!string.IsNullOrWhiteSpace(newSleepHours) && selectedDate.HasValue)
		{
			// Create a label for display
			string label = $"Sleep: {newSleepHours}h";

			// Add to calendar items
			items.Add(new CalendarItem(selectedDate.Value, label));

			// Save same way as events
			bio = label;
			SaveEntry();
		}

		newSleepHours = "";
		selectedDate = null;
	}



	




}
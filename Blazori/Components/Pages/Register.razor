@page "/Register"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<div class="page">

	@if (!didUserSave)
	{
		<div class="register">
			<h2>Register account</h2>
			<div class="formgroup">
				<label>Username</label>
				<input type="text" @bind="username" class="form" />
			</div>

			<div class="formgroup">
				<label>Password</label>
				<input type="password" @bind="password" class="form" />

			</div>


			@if(registerFailed)
			{
				<h2 style="color:red">Registering failed. Make sure you have filled all input fields.</h2>
			}
			<button class="button" @onclick="Save">Register</button>
			<button class="button" style="background-color:red" @onclick="@(() => NavigationManager.NavigateTo(""))">Did you mean to sign in?</button>
		</div>
	}

	@* Debug message. *@
	@if (didUserSave)
	{
		<div class="register">

		<h1>SUCCESSFULLY REGISTERED!</h1>

		<div class="formgroup">

		<h2>You have registered the user @Load().User</h2>

		</div>
			<button class="button" @onclick="@(() => NavigationManager.NavigateTo(""))">Sign in</button>
		</div>
		
	}
	
</div>


@code {
	//This is defined by the user's input.
	public string? username;
	public string? password;
	public bool didUserSave;
	public bool registerFailed;
	//Save input from frontend and create user directory and files based off of it.
	private void Save()
	{
		try{
			SaveLoad.DataSaving.Save(username, password);
			SaveLoad.StorageSaving.Save(username, "");
			registerFailed = false;
			didUserSave = true;
			

		}
		catch
		{
			registerFailed = true;
		}
		

	}

	//Load wanted fields of data from file -----> Pulls data based on the folder with the same name as the given username.
	private UserData Load()
	{
			//Try finding the folder named the same as the username string, finds the files inside.
			try{
			var output = SaveLoad.DataLoading.Load(username);
			return output;
			}
			//If it can't be found for some reason, create empty userdata.
			catch
			{
				
				return new UserData();
			}

	}

	}


